<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
    <!ENTITY % common_project  SYSTEM "../wadls/common_project.ent">
    %common_project;
]>
<chapter xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:linkend="http://www.w3.org/1999/linkend"
    xmlns:xref="http://www.w3.org/1999/xref"
    xmlns:wadl="http://wadl.dev.java.net/2009/02"
    version="5.0-extension RackBook-2.0" xml:id="identity-v3-ext"
    role="api-reference">
    <title>Identity API v3 extensions (CURRENT)</title>
    <para>
      This page describes these Identity API v3 extensions:
    </para>
    <itemizedlist role="compact">
        <listitem>
            <para>
                <link xlink:href="http://developer.openstack.org/api-ref-identity-v3-ext.html#identity_v3_OS-ENDPOINT-POLICY-ext">
OS-ENDPOINT-POLICY extension (OS-ENDPOINT-POLICY)
                </link>
            </para>
        </listitem>
        <listitem>
            <para>
                <link xlink:href="http://developer.openstack.org/api-ref-identity-v3-ext.html#identity_v3_OS-INHERIT-ext">
OS-INHERIT extension (OS-INHERIT)
                </link>
            </para>
        </listitem>
        <listitem>
            <para>
                <link xlink:href="http://developer.openstack.org/api-ref-identity-v3-ext.html#identity_v3_OS-KDS-ext">
    Key Distribution Server (KDS) extension (OS-KDS)
                </link>
            </para>
        </listitem>
        <listitem>
            <para>
                <link xlink:href="http://developer.openstack.org/api-ref-identity-v3-ext.html#identity_v3_OS-OAUTH1-ext">
OAuth extension (OS-OAUTH1)
                </link>
            </para>
          </listitem>
          <listitem>
            <para>
                <link xlink:href="http://developer.openstack.org/api-ref-identity-v3-ext.html#identity_v3_OS-TRUST-ext">
Trust extension (OS-TRUST)
                </link>
            </para>
        </listitem>
    </itemizedlist>
    <section xml:id="identity_v3_OS-ENDPOINT-POLICY-ext">
        <title>OS-ENDPOINT-POLICY extension (OS-ENDPOINT-POLICY)</title>
        <para>
            Creates, verifies, and deletes associations between service
            endpoints and policies. Such associations enable an endpoint to
            request its policy.
        </para>
        <para>
            To create, check, or delete an association, you reference a policy by its ID in
            the Identity server.
        </para>
        <para>
            The extension supports these associations:
        </para>
        <orderedlist>
            <listitem>
                <para>
                    A policy and endpoint association.
                </para>
            </listitem>
            <listitem>
                <para>
                    A policy and service-type endpoint in a region association.
                </para>
            </listitem>
            <listitem>
                <para>
                    A policy and service-type endpoint association.
                </para>
            </listitem>
        </orderedlist>
        <para>
            This order reflects policies in their most to least-specific order.
        </para>
        <para>
            When an endpoint requests the appropriate policy for itself, the
            extension finds the policy by traversing the ordered sequence of
            methods of association. The extension shows the policy for the
            first association that it finds.
        </para>
        <para>
            If the region of the endpoint has a parent, the extension examines
            the region associations up the region tree in ascending order. For
            region associations, the extension examines any parent regions in
            ascending order. The extension does not combine polices.
        </para>
        <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/OS-ENDPOINT-POLICY-v3.wadl#endpoints">
                <wadl:method href="#listPolicyEndpointAssociations"/>
            </wadl:resource>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/OS-ENDPOINT-POLICY-v3.wadl#policy">
                <wadl:method href="#showPolicyForEndpoint"/>
                <wadl:method href="#checkPolicyForEndpoint"/>
            </wadl:resource>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/OS-ENDPOINT-POLICY-v3.wadl#endpoint_id">
                <wadl:method href="#associatePolicyAndEndpoint"/>
                <wadl:method href="#getPolicyAndEndpointAssociation"/>
                <wadl:method href="#deletePolicyAndEndpointAssociation"/>
            </wadl:resource>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/OS-ENDPOINT-POLICY-v3.wadl#region_id">
                <wadl:method href="#associatePolicyAndServiceRegion"/>
                <wadl:method href="#getPolicyAndServiceRegionAssociation"/>
                <wadl:method href="#deletePolicyAndServiceRegionAssociation"/>
            </wadl:resource>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/OS-ENDPOINT-POLICY-v3.wadl#service_id">
                <wadl:method href="#associatePolicyAndService"/>
                <wadl:method href="#getPolicyAndServiceAssociation"/>
                <wadl:method href="#deletePolicyAndServiceAssociation"/>
            </wadl:resource>
        </wadl:resources>
    </section>
    <section xml:id="identity_v3_OS-INHERIT-ext">
        <title>OS-INHERIT extension (OS-INHERIT)</title>
        <para>
            Enables projects to inherit role assignments from either their
            owning domain or projects that are higher in the hierarchy.
        </para>
        <para>
            (Since API v3.4) The OS-INHERIT extension allows inheritance from both
            projects and domains. To access project inheritance, the Identity service
            server must run at least API v3.4.
        </para>
        <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02"
                href="../wadls/identity-api/src/v3/wadl/OS-INHERIT-v3.wadl"/>
    </section>
    <section xml:id="identity_v3_OS-KDS-ext">
        <title>Key Distribution Server (KDS) extension (OS-KDS)</title>
        <para>
            The Key Distribution Server (KDS) is a trusted third party that
            generates and securely distributes signing and encryption keys to
            communicating parties. These shared keys enable parties to
            exchange authenticated, confidential messages. KDS is an integral
            part of the RPC message security implementation. To establish a
            trusted relationship between the party and the KDS, a properly
            authorized user, such as a cloud administrator, must assign a
            long-term shared key to the communicating party. Assigning a key
            to a party requires assigning an identity to that party in the
            KDS. An identity includes a unique party name and the associated
            long-term shared key. This party name is used to identify a party
            when it communicates with KDS or another party.
        </para>
        <para>
            The KDS enables two individual parties or one individual party and
            a group party to exchange secure messages. To get keys so that it
            can communicate with another party, a party makes an authenticated
            request to KDS for a ticket. The KDS returns an encrypted ticket
            to the requesting party. The KDS encrypts the ticket with the
            long-term shared key that is associated with that party. Only the
            associated party or the KDS itself can decrypt the ticket.
        </para>
        <para>
            The KDS issues a ticket that contains a copy of the shared
            encryption and signing keys. These keys are for the source party,
            which is the party that requests the ticket. The ticket also
            contains a payload that is intended for the destination party,
            which is the party with whom the source party wants to
            communicate. This payload contains the information that the
            destination party can use to derive the shared encryption and
            signing keys. When the destination party is:
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    An individual. The payload is encrypted with the long-term
                    shared key that is associated with the destination party.
                </para>
            </listitem>
            <listitem>
                <para>
                    A group. The payload is encrypted with a shared group key
                    that the KDS makes available to all members of the group.
                    This encryption enables the destination party to trust
                    that the information in the payload was supplied by the
                    KDS.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            When the source party is ready to communicate with the destination
            party, it sends this encrypted payload to the destination party
            along with whatever data it has protected with the shared signing
            and encryption keys. The destination party can decrypt the payload
            and derive the shared encryption and signing keys by using the
            payload information. Both parties have a copy of the shared
            signing and encryption keys that are trusted as being issued by
            the KDS. The destination party uses these shared keys to
            authenticate and decrypt the data sent by the source party.
        </para>
        <para>Other guidelines:</para>
        <itemizedlist>
            <listitem>
                <para>
                    When a source party must send secure messages to multiple
                    recipients, an authorized user can define a KDS group for
                    the recipients. Membership in a group is determined by
                    comparing a party name with the group name. The party is
                    considered a member if the party name matches
                    <code>&lt;group name&gt;.*</code>. For example, a party
                    named <code>scheduler.host.example.com</code> is
                    considered a member of the <code>scheduler</code> group.
                    This method is the same method that is used to name
                    message queues in OpenStack.
                </para>
            </listitem>
            <listitem>
                <para>
                    When a source party requests a ticket for a destination
                    party that is a group, KDS generates a short-lived group
                    key and assigns it to the group. This group key is used to
                    encrypt the payload in the ticket, which contains the
                    information that the destination party uses to derive the
                    shared signing and encryption keys.
                </para>
            </listitem>
            <listitem>
                <para>
                    When an individual destination party must decrypt the
                    payload that it receives from the source party as a part
                    of a group message, it makes an authenticated request to
                    KDS to get the short-lived group key. If the requester is
                    a member of the target group, KDS provides the short-lived
                    group key encrypted with the long-term shared key
                    associated with the individual destination party. The
                    individual destination party can then decrypt the group
                    key, which enables it to decrypt the payload and derive
                    the shared signing and encryption keys to use to
                    authenticate and decrypt the data sent by the source
                    party.
                </para>
            </listitem>
            <listitem>
                <para>
                    When a sender gets keys to send a message to a group, all
                    group members and the sender share the signing and
                    encryption keys, which makes it impossible for an
                    individual destination party to determine whether a
                    message was sent by the source party or by another
                    destination party who is a group member. The destination
                    party can confirm only that the message was sent by a
                    party who has the shared signing and encryption keys. When
                    a sender uses keys to send a message to a group, all group
                    members must trust other members to operate in good faith.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            The signing and encryption keys that communicating parties share
            are short-lived. The life span of these keys is defined by a
            validity period that is set by the KDS when it issues the ticket.
            A suggested reasonable default validity period is 15 minutes,
            though the implementation determines the appropriate validity
            period.
        </para>
        <para>
            After the validity period for the keys expires, a party should
            refuse to use those keys to prevent the use of compromised keys.
            This requires the source party to request a new ticket from the
            KDS to get a new set of keys. An implementation can implement a
            grace period to account for clock skew between parties. This grace
            period enables a destination party to accept messages that use
            recently expired keys. If you use a grace period, its duration
            should be five or fewer minutes.
        </para>
        <para>
            A key server, unlike a pure public key-based system, can regulate
            the encryption and signing key exchange. When keys are requested,
            the key server actively distributes keys to communicating parties,
            applies access control, and denies communication between arbitrary
            peers in the system. This enables centralized access control,
            prevents unauthorized communication, and eliminates the need to
            perform post-authentication access control and policy lookups on
            the receiving side.
        </para>
        <para>
            The KDS requires that all ticket requests are authenticated and,
            where appropriate, data is encrypted. You must pass any time stamp
            value to the API as a <link
            xlink:href="https://en.wikipedia.org/wiki/ISO_8601#UTC">UTC</link>
            <link xlink:href="https://en.wikipedia.org/wiki/ISO_8601">ISO
            8601</link> date and time string that includes microseconds. For
            example, <code>2012-03-26T10:01:01.720000</code>.
        </para>
        <para>
            The default algorithms for message authentication and
            encryption are, respectively, HMAC-SHA-256 and AES-128-CBC.
            Therefore, the default block size is 128 bit.
        </para>
        <para>
            The source party that requests a ticket must send the encrypted
            <code>esek</code> payload to the destination party. The source and
            destination strings used when requesting the ticket also must be
            sent to the destination party to enable it to derive the shared
            signing end encryption keys. The messaging implementation is
            responsible for transferring this data to the destination party.
        </para>
        <para>
            The key derivation used to generate the shared signing and
            encryption keys uses the Hashed Message Authentication Code
            (HMAC)-based key derivation function (HKDF) standard, as
            described in RFC 5869. The destination party must use the HKDF
            <code>expand</code> function by using the information that it
            receives from the source party to complete derivation of the
            shared signing and encryption keys. The inputs to the HKDF
            <code>expand</code> function are:
        </para>
<programlisting>HKDF-Expand(esek.key, info, 256)</programlisting>
        <para>
            The <code>info</code> input for the HKDF <code>expand</code>
            function is a string that concatenates the source, destination,
            and <code>esek.timestamp</code> strings by using a comma
            (<code>,</code>) separator between each element. The following
            example shows a valid <code>info</code> string where
            <code>scheduler.host.example.com</code> is the source,
            <code>compute.host.example.com</code> is the destination, and
            <code>2012-03-26T10:01:01.720000</code> is the
            <code>esek.timestamp</code>:
        </para>
<programlisting>scheduler.host.example.com,compute.host.example.com,2012-03-26T10:01:01.720000</programlisting>
        <para>
            The output of the HKDF expand function is an array of bytes of 256
            bit length. The first half is the signing key, and the second half
            is the encryption key.
        </para>
        <para>
            Create and delete requests for long-term keys are restricted to
            authorized users, such as cloud administrators. The authentication
            and authorization for these requests is left up to the
            implementation, though the implementation should leverage the
            Identity API for these purposes.
        </para>
        <wadl:resources
            xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/OS-KDS-v3.wadl#party-name">
                <wadl:method href="#createKey"/>
                <wadl:method href="#deleteKey"/>
            </wadl:resource>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/OS-KDS-v3.wadl#tickets">
                <wadl:method href="#generateTicket"/>
            </wadl:resource>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/OS-KDS-v3.wadl#groups">
                <wadl:method href="#showGroupKey"/>
            </wadl:resource>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/OS-KDS-v3.wadl#group-name">
                <wadl:method href="#createGroup"/>
                <wadl:method href="#deleteGroup"/>
            </wadl:resource>
        </wadl:resources>
    </section>
    <section xml:id="identity_v3_OS-OAUTH1-ext">
        <title>OAuth extension (OS-OAUTH1)</title>
        <para>
            Enables users to delegate roles to third-party consumers through
            <link xlink:href="http://tools.ietf.org/html/rfc5849">The
            OAuth 1.0 Protocol</link>.
        </para>
        <para>
            A user is an Identity API user who delegates its roles and who
            authorizes request tokens.
        </para>
        <para>
            A consumer is a third-party application that uses OAuth to access
            a protected resource.
        </para>
        <para>
            Administrative users use an OAuth-derived token to act on behalf
            of the authorizing user.
        </para>
        <para>
            The consumer uses a request token to get authorization from the
            user. The consumer provides an OAuth verifier string with the
            request token in exchange for an access token.
        </para>
        <para>
            The consumer uses an access token to request Identity API tokens
            on behalf of the authorizing user instead of using the credentials
            for the user.
        </para>
        <para>
            Request and access tokens use token keys to identify themselves.
            For OpenStack purposes, the token key is the token ID. The
            consumer uses a token secret to establish ownership of a token.
            Both request and access tokens have token secrets.
        </para>
        <para>
            Delegated authentication through OAuth occurs as follows:
        </para>
        <orderedlist>
            <listitem>
                <para>A user creates a consumer.</para>
            </listitem>
            <listitem>
                <para>The consumer gets an unauthorized request token.
                    Then, the consumer uses the request token to
                    initiate user authorization.</para>
            </listitem>
            <listitem>
                <para>The user authorizes the request token.</para>
            </listitem>
            <listitem>
                <para>
                    The consumer exchanges the authorized request token and
                    the OAuth verifier for an access token.
                </para>
                <para>The authorizing user receives the request token
                    key from the consumer out-of-band.</para>
            </listitem>
            <listitem>
                <para>The consumer uses the access token to request an
                    Identity API token.</para>
            </listitem>
        </orderedlist>
        <wadl:resources
            href="../wadls/identity-api/src/v3/wadl/OS-OAUTH1-v3.wadl"
            xmlns:wadl="http://wadl.dev.java.net/2009/02"/>
    </section>
    <section xml:id="identity_v3_OS-TRUST-ext">
        <title>Trust extension (OS-TRUST)</title>
        <para>
            Creates a trust.
        </para>
        <para>
            A trust is an OpenStack Identity extension that enables delegation
            and, optionally, impersonation through <code>keystone</code>. A
            trust extension defines a relationship between a trustor and
            trustee. A trustor is the user who delegates a limited set of
            their own rights to another user, known as the trustee, for a
            limited time.
        </para>
        <para>
            The trust can eventually enable the trustee to impersonate the
            trustor. For security reasons, some safety measures are added. For
            example, if a trustor loses a given role, the API automatically
            revokes any trusts and the related tokens that the user issued
            with that role.
        </para>
        <para>
            For more information, see <link
            xlink:href="http://docs.openstack.org/admin-guide-cloud/keystone_use_trusts.html">Use
            trusts</link>.
        </para>
        <wadl:resources
            xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/OS-TRUST-v3.wadl#trusts">
                <wadl:method href="#createTrust"/>
            </wadl:resource>
        </wadl:resources>
    </section>
</chapter>

