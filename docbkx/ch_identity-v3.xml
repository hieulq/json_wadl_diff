<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
   <!ENTITY % common_project  SYSTEM "../wadls/common_project.ent">
   %common_project;
]>
<chapter xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:linkend="http://www.w3.org/1999/linkend"
    xmlns:xref="http://www.w3.org/1999/xref"
    xmlns:wadl="http://wadl.dev.java.net/2009/02"
    version="5.0-extension RackBook-2.0" xml:id="identity-v3"
    role="api-reference">
    <title>Identity API v3 (CURRENT)</title>
    <para>
        The Identity service generates authentication tokens that permit
        access to the OpenStack services REST APIs. Clients obtain this token
        and the URL endpoints for other service APIs by supplying their valid
        credentials to the authentication service.
    </para>
    <para>
        Each time you make a REST API request to an OpenStack service, you
        supply your authentication token in the <code>X-Auth-Token</code>
        request header.
    </para>
    <para>
        Like most OpenStack projects, OpenStack Identity protects its APIs by
        defining policy rules based on a role-based access control (RBAC)
        approach.
    </para>
    <para>
        The Identity service <link
        xlink:href="http://docs.openstack.org/liberty/config-reference/content/keystone-configuration-file.html">keystone.conf</link> configuration file sets the
        name and location of a JSON policy file that stores these rules.
    </para>
    <para>
        For information about Identity API protection, see <link
        xlink:href="http://docs.openstack.org/admin-guide-cloud/identity_service_api_protection.html">Identity
        API protection with role-based access control (RBAC)</link> in the
        <citetitle>OpenStack Cloud Administrator Guide</citetitle>.
    </para>
    <para>
      This page lists the Identity API operations in the following order:
    </para>
    <itemizedlist role="compact">
        <!-- <listitem>
            <para>
                <link xlink:href="http://developer.openstack.org/api-ref-identity-v3.html#versions-identity-v3">API versions</link>
            </para>
        </listitem> -->
        <listitem>
            <para>
                <link xlink:href="http://developer.openstack.org/api-ref-identity-v3.html#authenticate-v3">Authentication and token management</link>
            </para>
        </listitem>
        <listitem>
            <para>
                <link xlink:href="http://developer.openstack.org/api-ref-identity-v3.html#credentials-v3">Credentials</link>
            </para>
        </listitem>
        <listitem>
            <para>
                <link xlink:href="http://developer.openstack.org/api-ref-identity-v3.html#domains-v3">Domains</link>
            </para>
        </listitem>
        <listitem>
            <para>
                <link xlink:href="http://developer.openstack.org/api-ref-identity-v3.html#domains-config-v3">Domain configuration</link>
            </para>
        </listitem>
        <listitem>
            <para>
                <link xlink:href="http://developer.openstack.org/api-ref-identity-v3.html#groups-v3">Groups</link>
            </para>
        </listitem>
        <listitem>
            <para>
                <link xlink:href="http://developer.openstack.org/api-ref-identity-v3.html#policies-v3">Policies</link>
            </para>
        </listitem>
        <listitem>
            <para>
                <link xlink:href="http://developer.openstack.org/api-ref-identity-v3.html#projects-v3">Projects</link>
            </para>
        </listitem>
        <listitem>
            <para>
                <link xlink:href="http://developer.openstack.org/api-ref-identity-v3.html#regions-v3">Regions</link>
            </para>
        </listitem>
        <listitem>
            <para>
                <link xlink:href="http://developer.openstack.org/api-ref-identity-v3.html#roles-v3">Roles and role assignments</link>
            </para>
        </listitem>
        <listitem>
            <para>
                <link xlink:href="http://developer.openstack.org/api-ref-identity-v3.html#service-catalog-v3">Service catalog and endpoints</link>
            </para>
        </listitem>
        <listitem>
            <para>
                <link xlink:href="http://developer.openstack.org/api-ref-identity-v3.html#users-v3">Users</link>
            </para>
        </listitem>
    </itemizedlist>
    <!-- ************************************ -->
    <!-- API VERSIONS                         -->
    <!-- ************************************ -->
    <!-- <section xml:id="versions-identity-v3">
        <title>API versions</title>
        <para>
            You can list information about all Identity API versions or show
            details for the most recent Identity API v3 micro-version.
        </para>
        <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#versions-v3">
                <wadl:method href="#listVersions-v3"/>
            </wadl:resource>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#version"/>
        </wadl:resources>
    </section> -->
    <!-- ************************************ -->
    <!-- AUTHENTICATION                       -->
    <!-- ************************************ -->
    <section xml:id="authenticate-v3">
        <title>Authentication and token management (auth, tokens)</title>
        <para>
            In exchange for a set of authentication credentials, the Identity
            service generates tokens. A token represents the authenticated
            identity of a user and, optionally, grants authorization on a
            specific project or domain.
        </para>
        <para>
            The body of an authentication request must include a payload that
            specifies the authentication method, which is
            <code>password</code> or <code>token</code>, the credentials, and,
            optionally, the authorization scope. You can scope a token to a
            project or domain, or the token can be unscoped. You cannot scope
            a token to both a project and domain.
        </para>
        <para>
            Tokens have IDs, which the Identity API returns in the
            <code>X-Subject-Token</code> response header.
        </para>
        <para>
            Also, validates an authentication token and lists the domains,
            projects, roles, and endpoints to which the token gives access.
            Forces the immediate revocation of a token.
        </para>
        <para>
            After you obtain an authentication token, you can:
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    Make REST API requests to other OpenStack services. You
                    supply the ID of your authentication token in the
                    <code>X-Auth-Token</code> request header.
                </para>
            </listitem>
            <listitem>
                <para>
                    Validate your authentication token and list the domains,
                    projects, roles, and endpoints that your token gives you
                    access to.
                </para>
            </listitem>
            <listitem>
                <para>
                    Use your token to request another token scoped for a
                    different domain and project.
                </para>
            </listitem>
            <listitem>
                <para>
                    Force the immediate revocation of a token.
                </para>
            </listitem>
            <listitem>
                <para>
                    List revoked public key infrastructure (PKI) tokens.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            The Identity API treats expired tokens as no longer valid
            tokens. The deployment determines how long expired tokens are
            stored.
        </para>
        <para>
            These authentication errors can occur:
        </para>
        <table rules="all" frame="border">
            <caption>Authentication errors</caption>
            <col width="20%" valign="top"/>
            <col width="80%" valign="top"/>
            <thead>
                <tr>
                    <th>Response code</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <para>
                            <code>Bad Request (400)</code>
                        </para>
                    </td>
                    <td>
                        <para>
                            The Identity service failed to parse the request
                            as expected. One of the following errors occurred:
                        </para>
                        <itemizedlist>
                            <listitem>
                                <para>
                                    A required attribute was missing.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    An attribute that is not allowed was
                                    specified, such as an ID on a &POST;
                                    request in a basic CRUD operation.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    An attribute of an unexpected data type
                                    was specified.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </td>
                </tr>
                <tr>
                    <td>
                        <para>
                            <code>Unauthorized (401)</code>
                        </para>
                    </td>
                    <td>
                        <para>
                            One of the following errors occurred:
                        </para>
                        <itemizedlist>
                            <listitem>
                                <para>
                                    Authentication was not performed.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    The specified <code>X-Auth-Token</code>
                                    header is not valid.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    The authentication credentials are not valid.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </td>
                </tr>
                <tr>
                    <td>
                        <para>
                            <code>Forbidden (403)</code>
                        </para>
                    </td>
                    <td>
                        <para>
                            The identity was successfully authenticated but it
                            is not authorized to perform the requested action.
                        </para>
                    </td>
                </tr>
                <tr>
                    <td>
                        <para>
                            <code>Not Found (404)</code>
                        </para>
                    </td>
                    <td>
                        <para>
                            An operation failed because a referenced entity
                            cannot be found by ID. For a &POST; request, the
                            referenced entity might be specified in the
                            request body rather than in the resource path.
                        </para>
                    </td>
                </tr>
                <tr>
                    <td>
                        <para>
                            <code>Conflict (409)</code>
                        </para>
                    </td>
                    <td>
                        <para>
                            A &POST; or &PATCH; operation failed. For example,
                            a client tried to update a unique attribute for an
                            entity, which conflicts with that of another
                            entity in the same collection.
                        </para>
                        <para>
                            Or, a client issued a create operation twice on a
                            collection with a user-defined, unique attribute.
                            For example, a client made a &POST;
                            <code>/users</code> request two times for the
                            unique, user-defined name attribute for a user
                            entity.
                        </para>
                    </td>
                </tr>
            </tbody>
        </table>
        <para></para>
        <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#tokens">
                <wadl:method href="#authenticatePasswordUnscoped"/>
                <wadl:method href="#authenticatePasswordExplicitUnscoped"/>
                <wadl:method href="#authenticatePasswordScoped"/>
                <wadl:method href="#authenticateTokenUnscoped"/>
                <wadl:method href="#authenticateTokenScoped"/>
                <wadl:method href="#validateToken"/>
                <wadl:method href="#checkToken"/>
                <wadl:method href="#revokeTokens"/>
            </wadl:resource>
        </wadl:resources>
    </section>
    <!-- ************************************ -->
    <!-- CREDENTIALS                          -->
    <!-- ************************************ -->
    <section xml:id="credentials-v3">
        <title>Credentials (credentials)</title>
        <para>
            In exchange for a set of authentication credentials that the user
            submits, the Identity service generates and returns a token. A
            token represents the authenticated identity of a user and,
            optionally, grants authorization on a specific project or domain.
        </para>
        <para>
            You can list all credentials, and create, show details for,
            update, and delete a credential.
        </para>
        <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#credentials"/>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#credential_id"/>
        </wadl:resources>
    </section>
    <!-- ************************************ -->
    <!-- DOMAINS                              -->
    <!-- ************************************ -->
    <section xml:id="domains-v3">
        <title>Domains (domains, users, groups, roles)</title>
        <para>
            A domain is a collection of users, groups, and projects. Each
            group and project is owned by exactly one domain.
        </para>
        <para>
            Each domain defines a namespace where certain API-visible name
            attributes exist, which affects whether those names must be
            globally unique or unique within that domain. In the Identity API,
            the uniqueness of these attributes is as follows:
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    <emphasis role="italic">Domain name</emphasis>. Globally
                    unique across all domains.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="italic">Role name</emphasis>. Globally
                    unique across all domains.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="italic">User name</emphasis>. Unique
                    within the owning domain.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="italic">Project name</emphasis>. Unique
                    within the owning domain.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="italic">Group name</emphasis>. Unique
                    within the owning domain.
                </para>
            </listitem>
        </itemizedlist>
        <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <wadl:resource
                href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#domains">
                <wadl:method href="#listDomains"/>
                <wadl:method href="#createDomain"/>
            </wadl:resource>
            <wadl:resource
                href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#domain_id">
                <wadl:method href="#showDomain"/>
                <wadl:method href="#updateDomain"/>
                <wadl:method href="#deleteDomain"/>
            </wadl:resource>
        </wadl:resources>
    </section>
    <!-- ************************************ -->
    <!-- DOMAIN CONFIGURATION                 -->
    <!-- ************************************ -->
    <section xml:id="domains-config-v3">
        <title>Domain configuration (domains, config) (since v3.4) (EXPERIMENTAL)</title>
        <para>
            You can manage domain-specific configuration options.
        </para>
        <para>
            Domain-specific configuration options are structured within their
            group objects. The API supports only the <code>identity</code> and
            <code>ldap</code> groups. These groups override the default
            configuration settings for the storage of users and groups by the
            Identity server.
        </para>
        <para>
            You can create, update, and delete domain-specific configuration
            options by using the HTTP &PUT;, &PATCH;, and &DELETE; methods.
            When updating, it is only necessary to include those options that
            are being updated.
        </para>
        <para>
            To create an option, use the &PUT; method. The Identity API does
            not return options that are considered sensitive, although you can
            create and update these options. The only option currently
            considered sensitive is the <code>password</code> option within
            the <code>ldap</code> group.
        </para>
        <para>
            The API enables you to include sensitive options as part of non-
            sensitive options. For example, you can include the password as
            part of the <code>url</code> option.
        </para>
        <para>
            If you try to create or update configuration options for groups
            other than the <code>identity</code> or <code>ldap</code>
            groups, the <code>Forbidden (403)</code> response code is
            returned.
        </para>
        <para>
            For information about how to integrate the Identity service with
            LDAP, see <link
            xlink:href="http://docs.openstack.org/admin-guide-cloud/keystone_integrate_with_ldap.html">Integrate Identity with LDAP</link>.
        </para>
        <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#config"/>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#config-group"/>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#config-option"/>
        </wadl:resources>
    </section>
    <!-- ************************************ -->
    <!-- GROUPS                               -->
    <!-- ************************************ -->
    <section xml:id="groups-v3">
        <title>Groups (groups, users)</title>
        <para>
            A group is a collection of users. Each group is owned by a domain.
        </para>
        <para>
            When you grant a role to a group, you explicitly associate that
            group with a project or domain. This action is equivalent to
            granting the role to each group member on that project and domain.
        </para>
        <para>
            When you grant a role to a group, that role is automatically
            granted to any user that you add to the group. When you revoke a
            role from a group, that role is automatically revoked from any
            user that you remove from the group. Any token that authenticates
            that user, project, and domain is revoked.
        </para>
        <para>
            As with users, a group without any role grants is useless from the
            perspective an OpenStack service and has no access to resources.
            However, a group without role grants is permitted as a way of
            acquiring or loading users and groups from external sources before
            mapping them to projects and domains.
        </para>
        <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#group-groups"/>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#group-group_id"/>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#group-users"/>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#group-user-user_id"/>
        </wadl:resources>
    </section>
    <!-- ************************************ -->
    <!-- POLICIES                             -->
    <!-- ************************************ -->
     <section xml:id="policies-v3">
        <title>Policies (policies)</title>
        <para>
            A policy is an arbitrarily serialized policy engine rule set to
            be consumed by a remote service.
        </para>
        <para>
            You encode policy rule sets into a blob that remote services can
            consume. To do so, set <code>type</code> to
            <code>application/json</code> and specify policy rules as JSON
            strings in a <code>blob</code>. For example:
        </para>
<programlisting>{
    "blob":{
        "foobar_user":[
            "role:compute-user"
        ]
    }
}</programlisting>
        <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#policies">
                <wadl:method href="#createPolicy"/>
                <wadl:method href="#listPolicies"/>
            </wadl:resource>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#policy_id">
                <wadl:method href="#showPolicy"/>
                <wadl:method href="#updatePolicy"/>
                <wadl:method href="#deletePolicy"/>
            </wadl:resource>
        </wadl:resources>
    </section>
    <!-- ************************************ -->
    <!-- PROJECTS                             -->
    <!-- ************************************ -->
    <section xml:id="projects-v3">
        <title>Projects (projects, users, groups, roles)</title>
        <para>
            A project is the base unit of ownership. Resources are owned by a
            specific project. A project is owned by a specific domain.
        </para>
        <para>
            (Since v3.4) You can create a hierarchy of projects by setting a
            parent ID when you create projects. All projects in a hierarchy
            must be owned by the same domain.
        </para>
        <para>
            (Since v3.6) Optionally, you can create a project that behaves
            both as a project and a domain. As a domain, the project provides
            a name space in which you can create users, groups, and other
            projects. If you create a project that behaves as a domain, you
            cannot update this project to behave like a regular project.
        </para>
        <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#projects">
                <wadl:method href="#listProjects"/>
                <wadl:method href="#createProject"/>
            </wadl:resource>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#project_id">
                <wadl:method href="#showProject"/>
                <wadl:method href="#updateProject"/>
                <wadl:method href="#deleteProject"/>
            </wadl:resource>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#cascade">
                <wadl:method href="#enableProject"/>
                <wadl:method href="#deleteProjectSubtree"/>
            </wadl:resource>
        </wadl:resources>
    </section>
    <!-- ************************************ -->
    <!-- REGIONS                              -->
    <!-- ************************************ -->
    <section xml:id="regions-v3">
        <title>Regions (regions) (since v3.2)</title>
        <para>
            A region is a general division of an OpenStack deployment. You can
            associate zero or more sub-regions with a region to create a
            tree-like structured hierarchy.
        </para>
        <para>
            Although a region does not have a geographical connotation, a
            deployment can use a geographical name for a region, such as
            <code>us-east</code>.
        </para>
        <para>
            You can list, create, update, show details for, and delete
            regions.
        </para>
        <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#regions"/>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#user_defined_region_id"/>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#region_id"/>
        </wadl:resources>
    </section>
    <!-- ************************************ -->
    <!-- ROLES                                -->
    <!-- ************************************ -->
    <section xml:id="roles-v3">
        <title>Roles (roles)</title>
        <para>
            Roles grant a user a set of permitted actions for either a
            specific project or an entire domain.
        </para>
        <para>
            You can grant roles to a user on a project, including
            projects owned by other domains.
        </para>
        <para>
            You can create, list, and delete roles. You can also list roles
            assigned to a specified domain, project, or user.
        </para>
        <para>
            You can list role assignments and, since v3.6, all role
            assignments within a tree of projects. Use the query parameters to
            filter the list because the role assignments list can be long.
            Some typical examples are:
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    List role assignments for the specified user:
                </para>
                <para>
                  <programlisting>GET /role_assignments?user.id={user_id}</programlisting>
                </para>
            </listitem>
            <listitem>
                <para>
                    List role assignments for the specified project:
                </para>
                <para>
                  <programlisting>GET /role_assignments?scope.project.id={project_id}</programlisting>
                </para>
            </listitem>
            <listitem>
                <para>
                    List all role assignments for a specified project and its sub- projects:
                </para>
                <para>
                  <programlisting>GET /role_assignments?scope.project.id={project_id}?include_subtree=true</programlisting>
                </para>
                <para>
                    If you specify <code>include_subtree=true</code>, you must
                    also specify the <code>scope.project.id</code>. Otherwise,
                    this call returns the <code>Bad Request (400)</code>
                    response code.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            Each role assignment entity in the collection contains a link
            to the assignment that created the entity.
        </para>
        <para>
            Use the <code>effective</code> query parameter to list effective
            assignments at the user, project, and domain level. This parameter
            allows for the effects of group membership. The group role
            assignment entities themselves are not returned in the collection.
            This represents the effective role assignments that would be
            included in a scoped token.
        </para>
        <para>
            In the response, the <code>links</code> entity section for
            entities for group members also contains a URL that enables access
            to the membership of the group.
        </para>
        <para>
            You can use the other query parameters with the
            <code>effective</code> parameter, such as:
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    Determine what a user can actually do:
                </para>
                <para>
                  <programlisting>GET /role_assignments?user.id={user_id}&amp;effective</programlisting>
                </para>
            </listitem>
            <listitem>
                <para>
                    Get the equivalent set of role assignments that are
                    included in a project-scoped token response:
                </para>
                <para>
                  <programlisting>GET /role_assignments?user.id={user_id}&amp;scope.project.id={project_id}&amp;effective</programlisting>
                </para>
            </listitem>
        </itemizedlist>
        <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#roles">
                <wadl:method href="#createRole"/>
                <wadl:method href="#listRoles"/>
            </wadl:resource>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#roles-role_id">
                <wadl:method href="#showRole"/>
                <wadl:method href="#updateRole"/>
                <wadl:method href="#deleteRole"/>
            </wadl:resource>
            <wadl:resource
                href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#domains-users-roles">
                <wadl:method href="#listDomainUserRoles"/>
            </wadl:resource>
            <wadl:resource
                href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#domains-users-roles-role_id">
                <wadl:method href="#grantDomainUserRole"/>
                <wadl:method href="#checkDomainUserRole"/>
                <wadl:method href="#revokeDomainUserRole"/>
            </wadl:resource>
            <wadl:resource
                href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#domains-groups-roles">
                <wadl:method href="#listDomainGroupRoles"/>
            </wadl:resource>
            <wadl:resource
                href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#domains-groups-roles-role_id">
                <wadl:method href="#grantDomainGroupRole"/>
                <wadl:method href="#checkDomainGroupRole"/>
                <wadl:method href="#revokeDomainGroupRole"/>
            </wadl:resource>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#projects-users-roles">
                <wadl:method href="#listProjectUserRoles"/>
            </wadl:resource>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#projects-users-role_id">
                <wadl:method href="#grantProjectUserRole"/>
                <wadl:method href="#checkProjectUserRole"/>
                <wadl:method href="#revokeProjectUserRole"/>
            </wadl:resource>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#projects-groups-roles">
                <wadl:method href="#listProjectGroupRoles"/>
            </wadl:resource>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#projects-groups-role_id">
                <wadl:method href="#grantProjectGroupRole"/>
                <wadl:method href="#checkProjectGroupRole"/>
                <wadl:method href="#revokeProjectGroupRole"/>
            </wadl:resource>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#role_assignments">
                <wadl:method href="#listRoleAssignments"/>
            </wadl:resource>
        </wadl:resources>
    </section>
    <!-- ************************************ -->
    <!-- SERVICE CATALOG AND ENDPOINTS        -->
    <!-- ************************************ -->
    <section xml:id="service-catalog-v3">
        <title>Service catalog and endpoints (services, endpoints)</title>
        <para>
            A service is an OpenStack web service that you can access through
            a URL, or endpoint.
        </para>
        <para>
            A service catalog lists the services that are available to the
            caller based upon the current authorization.
        </para>
        <para>
            You can create, list, show details for, update, and delete
            services. When you create or update a service, you can enable the
            service, which causes it and its endpoints to appear in the
            service catalog.
        </para>
        <para>
            You can create, list, show details for, update, and delete endpoints.
        </para>
        <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#services"/>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#service_id"/>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#endpoints"/>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#endpoint_id"/>
        </wadl:resources>
    </section>
    <!-- ************************************ -->
    <!-- USERS                                -->
    <!-- ************************************ -->
    <section xml:id="users-v3">
        <title>Users (users, groups, projects, roles)</title>
        <para>
            A user is an individual API consumer that is owned by a domain. A
            role explicitly associates a user with projects or domains. A user
            with no assigned roles has no access to OpenStack resources.
        </para>
        <para>
            You can list, create, show details for, update, delete, and change the password for users.
        </para>
        <para>
            You can also list groups, projects, and roles for a specified
            user. To list user roles, see <link
            xlink:href="http://developer.openstack.org/api-ref-identity-v3.html#roles-v3">Roles</link>.
        </para>
        <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#users-users">
                <wadl:method href="#listUsers"/>
                <wadl:method href="#createUser"/>
            </wadl:resource>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#users-user_id">
                <wadl:method href="#showUser"/>
                <wadl:method href="#updateUser"/>
                <wadl:method href="#deleteUser"/>
            </wadl:resource>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#password">
                <wadl:method href="#changeUserPassword"/>
            </wadl:resource>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#user-groups">
                <wadl:method href="#listUserGroups"/>
            </wadl:resource>
            <wadl:resource href="../wadls/identity-api/src/v3/wadl/identity-admin-v3.wadl#user-projects">
                <wadl:method href="#listUserProjects"/>
            </wadl:resource>
        </wadl:resources>
    </section>
</chapter>
