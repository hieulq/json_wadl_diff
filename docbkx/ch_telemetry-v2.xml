<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:linkend="http://www.w3.org/1999/linkend"
    xmlns:xref="http://www.w3.org/1999/xref"
    xmlns:wadl="http://wadl.dev.java.net/2009/02"
    version="5.0-extension RackBook-2.0" xml:id="telemetry-v2"
    role="api-reference">
    <title>Telemetry API v2 (CURRENT)</title>
    <para>
        Manages alarms, meters, samples, resources, and capabilities through a
        set of services:
    </para>
    <itemizedlist>
        <listitem>
            <para>
                <link xlink:href="http://docs.openstack.org/developer/aodh/">Aodh</link>.
                An alarm service.
            </para>
        </listitem>
        <listitem>
            <para>
                <link xlink:href="http://docs.openstack.org/developer/ceilometer/">
                Ceilometer </link>. A data collection service.
            </para>
        </listitem>
        <listitem>
            <para>
                <link
                xlink:href="http://docs.openstack.org/developer/gnocchi/">Gnocchi</link>. A
                time-series database and resource indexing service.
            </para>
        </listitem>
    </itemizedlist>
    <para>
        If Gnocchi is enabled, meters, samples, and resources API operations
        return the <code>410</code> response code.
    </para>
    <section xml:id="alarms">
        <title>Alarms</title>
        <para>
            Lists, creates, gets details for, updates, and deletes
            alarms.
        </para>
        <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <wadl:resource
                href="../wadls/telemetry-api/src/v2/wadl/os-telemetry-api-2.0.wadl#alarms">
                <wadl:method href="#listAlarms"/>
                <wadl:method href="#createAlarm"/>
            </wadl:resource>
            <wadl:resource
                href="../wadls/telemetry-api/src/v2/wadl/os-telemetry-api-2.0.wadl#alarm_id">
                <wadl:method href="#showAlarm"/>
                <wadl:method href="#updateAlarm"/>
                <wadl:method href="#deleteAlarm"/>
            </wadl:resource>
            <wadl:resource
                href="../wadls/telemetry-api/src/v2/wadl/os-telemetry-api-2.0.wadl#state">
                <wadl:method href="#updateAlarmState"/>
                <wadl:method href="#showAlarmState"/>
            </wadl:resource>
            <wadl:resource
                href="../wadls/telemetry-api/src/v2/wadl/os-telemetry-api-2.0.wadl#history">
                <wadl:method href="#showAlarmHistory"/>
            </wadl:resource>
        </wadl:resources>
    </section>
    <section xml:id="meters">
        <title>Meters</title>
        <para>
            Lists all meters, adds samples to meters, and lists samples for
            meters. For list operations, if you do not explicitly set the
            <code>limit</code> query parameter, a default limit is applied.
            The default limit is the <code>default_api_return_limit</code>
            configuration option value.
        </para>
        <para>
            Also, computes and lists statistics for samples in a
            time range. You can use the <code>aggregate</code> query parameter
            in the <code>statistics</code> URI to explicitly select the
            <code>stddev</code>, <code>cardinality</code>, or any other
            standard function. For example:
        </para>
<programlisting>GET /v2/meters/METER_NAME/statistics?aggregate.func=NAME&amp;aggregate.param=VALUE</programlisting>
        <para>
            The <code>aggregate.param</code> parameter value is optional for
            all functions except the <code>cardinality</code> function.
        </para>
        <para>
            The API silently ignores any duplicate aggregate function and
            parameter pairs.
        </para>
        <para>
            The API accepts and storage drivers support duplicate functions
            with different parameter values. In this example, the
            <code>cardinality</code> function is accepted twice with two
            different parameter values:
        </para>
<programlisting>GET /v2/meters/METER_NAME/statistics?aggregate.func=cardinality&amp;aggregate.param=resource_id
        &amp;aggregate.func=cardinality&amp;aggregate.param=project_id</programlisting>
        <para><emphasis role="bold">Examples:</emphasis></para>
        <para>
            Use the <code>stddev</code> function to request the standard
            deviation of CPU utilization:
        </para>
<programlisting>GET /v2/meters/cpu_util/statistics?aggregate.func=stddev</programlisting>
        <para>
            The response looks like this:
        </para>
<programlisting language="json">[
    {
        "aggregate": {
            "stddev": 0.6858829
        },
        "duration_start": "2014-01-30T11:13:23",
        "duration_end": "2014-01-31T16:07:13",
        "duration": 104030,
        "period": 0,
        "period_start": "2014-01-30T11:13:23",
        "period_end": "2014-01-31T16:07:13",
        "groupby": null,
        "unit": "%"
    }
]</programlisting>
        <para>
            Use the <code>cardinality</code> function with the project ID to
            return the number of distinct tenants with images:
        </para>
<programlisting>GET /v2/meters/image/statistics?aggregate.func=cardinality&amp;aggregate.param=project_id</programlisting>
        <para>
            The following, more complex, example determines:
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    The number of distinct instances (<code>cardinality</code>)
                </para>
            </listitem>
            <listitem>
                <para>
                    The total number of instance samples (<code>count</code>)
                    for a tenant in 15-minute intervals (<code>period</code> and
                    <code>groupby</code> options)
                </para>
            </listitem>
        </itemizedlist>
<programlisting>GET /v2/meters/instance/statistics?aggregate.func=cardinality&amp;aggregate.param=resource_id
        &amp;aggregate.func=count&amp;groupby=project_id&amp;period=900</programlisting>
        <para>
            The response looks like this:
        </para>
<programlisting language="json">[
    {
        "count": 19,
        "aggregate": {
            "count": 19,
            "cardinality/resource_id": 3
        },
        "duration": 328.47803,
        "duration_start": "2014-01-31T10:00:41.823919",
        "duration_end": "2014-01-31T10:06:10.301948",
        "period": 900,
        "period_start": "2014-01-31T10:00:00",
        "period_end": "2014-01-31T10:15:00",
        "groupby": {
            "project_id": "061a5c91811e4044b7dc86c6136c4f99"
        },
        "unit": "instance"
    },
    {
        "count": 22,
        "aggregate": {
            "count": 22,
            "cardinality/resource_id": 4
        },
        "duration": 808.00385,
        "duration_start": "2014-01-31T10:15:15",
        "duration_end": "2014-01-31T10:28:43.003840",
        "period": 900,
        "period_start": "2014-01-31T10:15:00",
        "period_end": "2014-01-31T10:30:00",
        "groupby": {
            "project_id": "061a5c91811e4044b7dc86c6136c4f99"
        },
        "unit": "instance"
    },
    {
        "count": 2,
        "aggregate": {
            "count": 2,
            "cardinality/resource_id": 2
        },
        "duration": 0,
        "duration_start": "2014-01-31T10:35:15",
        "duration_end": "2014-01-31T10:35:15",
        "period": 900,
        "period_start": "2014-01-31T10:30:00",
        "period_end": "2014-01-31T10:45:00",
        "groupby": {
            "project_id": "061a5c91811e4044b7dc86c6136c4f99"
        },
        "unit": "instance"
    }
]</programlisting>
        <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
             <wadl:resource
                href="../wadls/telemetry-api/src/v2/wadl/os-telemetry-api-2.0.wadl#meters">
                <wadl:method href="#listMeters"/>
            </wadl:resource>
            <wadl:resource
                href="../wadls/telemetry-api/src/v2/wadl/os-telemetry-api-2.0.wadl#meter_name">
                <wadl:method href="#addSamplesToMeter"/>
                <wadl:method href="#listSamplesforMeter"/>
            </wadl:resource>
            <wadl:resource
                href="../wadls/telemetry-api/src/v2/wadl/os-telemetry-api-2.0.wadl#statistics">
                <wadl:method href="#listSamplesStatistics"/>
            </wadl:resource>
        </wadl:resources>
    </section>
    <section xml:id="samples">
        <title>Samples</title>
        <para>
            Lists all samples and gets information for a sample.
        </para>
        <para>
            For list operations, if you do not explicitly set the
            <code>limit</code> query parameter, a default limit is applied.
            The default limit is the <code>default_api_return_limit</code>
            configuration option value.
        </para>
        <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <wadl:resource
                href="../wadls/telemetry-api/src/v2/wadl/os-telemetry-api-2.0.wadl#samples">
                <wadl:method href="#listSamples"/>
            </wadl:resource>
            <wadl:resource
                href="../wadls/telemetry-api/src/v2/wadl/os-telemetry-api-2.0.wadl#sample_id">
                <wadl:method href="#showSample"/>
            </wadl:resource>
          </wadl:resources>
    </section>
    <section xml:id="resources">
        <title>Resources</title>
        <para>Lists all and gets information for resources.</para>
        <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <wadl:resource
                href="../wadls/telemetry-api/src/v2/wadl/os-telemetry-api-2.0.wadl#resources">
                <wadl:method href="#listResources"/>
            </wadl:resource>
            <wadl:resource
                href="../wadls/telemetry-api/src/v2/wadl/os-telemetry-api-2.0.wadl#resource_id">
                <wadl:method href="#showResource"/>
            </wadl:resource>
        </wadl:resources>
    </section>
    <section xml:id="capabilities">
        <title>Capabilities</title>
        <para>Gets information for API and storage capabilities.</para>
        <para>
            The Telemetry service enables you to store samples, events,
            and alarm definitions in supported database back ends. The
            <code>capabilities</code> resource enables you to list the
            capabilities that a database supports.
        </para>
        <para>
            The <code>capabilities</code> resource returns a flattened
            dictionary of capability properties, each with an associated
            boolean value. A value of <code>true</code> indicates that the
            corresponding capability is available in the back end.
        </para>
        <para>
            You can optionally configure separate database back ends for
            samples, events, and alarms definitions. The
            <code>capabilities</code> response shows a value of
            <code>true</code> to indicate that the definitions database for
            samples, events, or alarms is ready to use in a production
            environment.
        </para>
        <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <wadl:resource
                href="../wadls/telemetry-api/src/v2/wadl/os-telemetry-api-2.0.wadl#capabilities">
                <wadl:method href="#listCapabilities"/>
            </wadl:resource>
        </wadl:resources>
    </section>
    <section xml:id="events">
        <title>Events</title>
        <para>Lists all events and shows details for an event.</para>
        <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <wadl:resource
                href="../wadls/telemetry-api/src/v2/wadl/os-telemetry-api-2.0.wadl#events">
                <wadl:method href="#listEvents"/>
            </wadl:resource>
            <wadl:resource
                href="../wadls/telemetry-api/src/v2/wadl/os-telemetry-api-2.0.wadl#message_id">
                <wadl:method href="#showEvent"/>
            </wadl:resource>
        </wadl:resources>
    </section>
</chapter>
